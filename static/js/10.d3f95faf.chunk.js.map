{"version":3,"file":"static/js/10.d3f95faf.chunk.js","mappings":"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","sources":["other/Path.jsx","other/SortByPrice.jsx","pages/ProductListPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport GetApi from '../Api/GetCatalogApi';\r\nimport slugify from 'slugify'; // Библиотека для транслитерации, она делает обычное название с русского на транслите английского, в целом она делает URL-friendly\r\nimport { Fragment } from 'react';\r\n\r\nconst Path = ({className}) => {\r\n    const [pathData, setPathData] = useState([]);\r\n    const location = useLocation(); // Текущая локация, путь в url и другие данные\r\n    const pathnames = location.pathname.split('/').filter((x) => x); // Путь к роуту\r\n    console.log(pathnames)\r\n\r\n    const getApi = new GetApi();\r\n\r\n    useEffect(() => {\r\n        getProduct();\r\n    }, []);\r\n\r\n    const getProduct = async () => {\r\n        try {\r\n            const data = await getApi.getApi();\r\n            // Добавляем к каждому элементу slug для соответствия пути\r\n            const dataWithSlugs = data.map(item => ({\r\n                ...item, slug: slugify(item.title, { lower: true, locale: 'ru' })\r\n            }));\r\n            setPathData(dataWithSlugs);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <nav className={`${className} my-6`} aria-label=\"Breadcrumb\">\r\n            <ol className=\"flex flex-wrap items-center gap-2 text-sm text-gray-600\">\r\n            <li>\r\n                <Link to=\"/\" className=\"block transition hover:text-gray-700\">\r\n                <span className=\"sr-only\">Home</span>\r\n                <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"w-5 h-5 md:w-6 md:h-6\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                >\r\n                    <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\"\r\n                    d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\r\n                    />\r\n                </svg>\r\n                </Link>\r\n            </li>\r\n\r\n            {pathnames.map((value, index) => {\r\n                const to = `/${pathnames.slice(0, index + 1).join('/')}`;\r\n                const currentItem = pathData.find((item) => item.slug === value);\r\n\r\n                return (\r\n                <Fragment key={to}>\r\n                    <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    strokeWidth=\"1.5\"\r\n                    stroke=\"currentColor\"\r\n                    className=\"w-4 h-4 md:w-5 md:h-5 text-gray-500\"\r\n                    >\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 20.247l6-16.5\" />\r\n                    </svg>\r\n                    <li>\r\n                    <Link\r\n                        to={to}\r\n                        className=\"block transition hover:text-gray-700 text-base md:text-sm font-medium whitespace-nowrap truncate max-w-[100px] md:max-w-none\"\r\n                    >\r\n                        {currentItem ? currentItem.title : value}\r\n                    </Link>\r\n                    </li>\r\n                </Fragment>\r\n                );\r\n            })}\r\n            </ol>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Path;","import Slider from '@mui/material/Slider';\r\nimport { useProductContext } from '../hooks/useProductContext';\r\nimport Select from 'react-select'\r\nimport { useState } from 'react';\r\n\r\nconst minDistance = 300; // Минимальная дистанция при двух ползунках вместе\r\n\r\nconst SortByPrice = ({category}) => {\r\n  \r\n  const { value, setValue, productData, filteredData, setFilteredData, cards, setSelect} = useProductContext(); // Вызвали кастомный хук из которого вытащили контекст как наши пропсы\r\n\r\n  const filterChange = (event, newValue, activeThumb) => {\r\n    console.log(newValue) // Новое значение которое помещается в стейт\r\n    console.log(activeThumb) // Активный ползунок\r\n\r\n    if (activeThumb === 0) {\r\n      setValue([Math.min(newValue[0], value[1] - minDistance), value[1]]);\r\n    } else {\r\n      setValue([value[0], Math.max(newValue[1], value[0] + minDistance)]);\r\n    }\r\n  };\r\n\r\n  const selectChange = (selectedOption) => {\r\n    const selectedValue = selectedOption?.value;\r\n    const currentCards = filteredData.filter(item => item.category === category).slice(0, cards); // Берем только загруженные данные\r\n    const filteredLow = currentCards.slice().sort((a, b) => a.price - b.price) // Фильтруем их по цене\r\n    const filteredHigh = currentCards.slice().sort((a, b) => b.price - a.price) // Фильтруем их по цене\r\n    setSelect(selectedValue);\r\n\r\n    if (selectedValue === 'low') {\r\n      console.log('Вибрано от дешевых к дорогим');\r\n      setSelect(filteredLow)\r\n      setFilteredData(filteredLow)\r\n    } else if (selectedValue === 'high') {\r\n      console.log('Вибрано от дорогих к дешевым')\r\n      setSelect(filteredHigh)\r\n      setFilteredData(filteredHigh)\r\n    }\r\n  }\r\n\r\n  const sorting = () => {\r\n    const currentCards = productData.filter(item => item.category === category).slice(0, cards); // Берем только загруженные данные\r\n    const filteredCards = currentCards.filter(item => item.price >= value[0] && item.price <= value[1]); // Фильтруем их по цене\r\n    setFilteredData(filteredCards);\r\n    console.log(filteredData)\r\n  };\r\n\r\n  const reset = () => {\r\n    setFilteredData(productData); // Сброс данных к начальному состоянию\r\n    setValue([0, 4000]);\r\n  };\r\n\r\n  const obj = [\r\n    { value: 'high', label: 'Від дорогих до дешевих' },\r\n    { value: 'low', label: 'Від дешевих до дорогих' }\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <div className=\"slider-product max-w-full md:max-w-96 bg-white p-4 md:p-6 shadow-lg rounded-lg h-max xs:w-max\">\r\n        <div className=\"slider-title text-left font-semibold text-gray-700 mb-4 uppercase tracking-wide text-sm md:text-base\">\r\n          Ціна\r\n        </div>\r\n        \r\n        <Slider className='!p-0'\r\n          min={0}\r\n          max={4000}\r\n          value={value}\r\n          onChange={filterChange}\r\n          valueLabelDisplay=\"auto\"\r\n          disableSwap\r\n          color=\"secondary\"\r\n          sx={{\r\n            color: '#64748b',\r\n            '& .MuiSlider-thumb': {\r\n              width: 12,  // уменьшенный размер\r\n              height: 12, \r\n              border: '2px solid #475569',\r\n              backgroundColor: '#fff',\r\n              boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n            },\r\n            '& .MuiSlider-track': {\r\n              borderRadius: '8px',\r\n            },\r\n            '& .MuiSlider-rail': {\r\n              opacity: 0.3,\r\n            },\r\n          }}\r\n        />\r\n        \r\n        <div className=\"flex mt-4 md:mt-6 gap-2 md:gap-4\">\r\n          <div className=\"flex items-center w-1/2\">\r\n            <label className=\"title font-semibold text-gray-700 mr-2 text-xs md:text-sm\">Від</label>\r\n            <input\r\n              type=\"number\"\r\n              value={value[0]}\r\n              onChange={(e) => setValue([+e.target.value, value[1]])}\r\n              placeholder=\"Min\"\r\n              className=\"w-3/4 p-1 md:p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-400 text-gray-700 text-xs md:text-sm\"\r\n            />\r\n            <span className=\"text-gray-500 ml-1 text-xs\">₴</span>\r\n          </div>\r\n          \r\n          <div className=\"flex justify-center items-center w-1/2\">\r\n            <label className=\"title font-semibold text-gray-700 mr-2 text-xs md:text-sm\">До</label>\r\n            <input\r\n              type=\"number\"\r\n              value={value[1]}\r\n              onChange={(e) => setValue([value[0], +e.target.value])}\r\n              placeholder=\"Max\"\r\n              className=\"w-3/4 p-1 md:p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-400 text-gray-700 text-xs md:text-sm\"\r\n            />\r\n            <span className=\"text-gray-500 ml-1 text-xs\">₴</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex justify-around mt-4 md:mt-6 gap-2 md:gap-4\">\r\n          <button\r\n            onClick={() => sorting()}\r\n            type=\"button\"\r\n            className=\"py-1.5 px-4 md:py-2.5 md:px-6 text-xs md:text-sm bg-gray-800 text-white font-semibold transition-all duration-300 hover:bg-gray-600 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\r\n          >\r\n            Застосувати\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => reset()}\r\n            type=\"button\"\r\n            className=\"py-1.5 px-4 md:py-2.5 md:px-6 text-xs md:text-sm border border-gray-300 text-gray-600 font-semibold transition-all duration-300 hover:bg-gray-100 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300\"\r\n          >\r\n            Скинути фільтр\r\n          </button>\r\n        </div>\r\n        <div className=\"block w-full mt-4\">\r\n          <label className=\"block mb-2 text-sm font-semibold text-gray-600 w-full uppercase tracking-wide\">\r\n            Сортування\r\n          </label>\r\n            <Select\r\n              placeholder='Сортування за ціною'\r\n              options={obj}\r\n              onChange={value => selectChange(value)}\r\n              className='text-left'\r\n            />\r\n        </div>\r\n      </div>    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default SortByPrice;","import ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport slugify from 'slugify';\r\nimport GetApi from \"../Api/GetCatalogApi\";\r\nimport Path from '../other/Path'\r\nimport SortByPrice from \"../other/SortByPrice\";\r\nimport { useProductContext } from \"../hooks/useProductContext\";\r\n\r\nconst ProductListPage = ({ category, title}) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [disabled, setDisabled] = useState(false)\r\n  const {productData, setProductData, filteredData, cards, setCards, setFilteredData, setValue, setSelect} = useProductContext(); // Не забывать что мы достаём всё из контекста поэтому мы пишем именно хук для получения этих пропсов а не параметр компонента\r\n  \r\n  useEffect(() => {\r\n    setCards(6); // Сброс количества отображаемых карточек\r\n    setFilteredData(productData); // Сброс фильтрованных данных\r\n    setValue([0, 4000]); // Сброс диапазона цен\r\n    setSelect(''); // Сброс сортировки\r\n    setDisabled(false); // Сброс кнопки \"Загрузить\"\r\n  }, [category]); // Срабатывает при изменении категории\r\n  \r\n  const getApi = new GetApi();\r\n\r\n  const getProduct = async () => {\r\n    try {\r\n      const data = await getApi.getApi();\r\n      setFilteredData(data);\r\n      setProductData(data);\r\n      setTimeout(() => {\r\n        setIsLoading(false); // Устанавливаем загрузку в false после получения данных\r\n      }, 1500);\r\n\r\n    } catch (err) {\r\n      console.error(\"Error fetching data\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getProduct();\r\n  }, []);\r\n\r\n  const request = () => {\r\n    const filteredItems = productData.filter(item => item.category === category); // Тут получает данные только категория woman\r\n\r\n    if (cards + 3 >= filteredItems.length) {\r\n      console.log('Конец массива');\r\n      setCards(filteredItems.length); // Устанавливаем cards на длину массива, чтобы не увеличивать его дальше\r\n      setDisabled(true)\r\n    } else {\r\n      setCards(prev => prev + 3)\r\n    }\r\n    console.log(filteredData)\r\n  }; \r\n\r\n  const reset = () => {\r\n    setFilteredData(productData);\r\n    setValue([0, 4000]);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    reset();\r\n    request();\r\n  }\r\n\r\n  console.log(filteredData) // количество отфильтрованных карточек\r\n\r\n  const dataToDisplay = filteredData.length === 0 ? productData : filteredData; // Проблема в изначальной загрузке, я загружаю сразу filteredData когда должен изначально загружить productData\r\n  console.log(dataToDisplay)\r\n  return (\r\n    <section className=\"productList\">\r\n      <div className=\"product-container py-10 lg:w-5/6 xl:w-9/12 mx-auto xs:w-11/12 text-center xs:py-4\">\r\n        <h1 className=\"product-title font-medium xs:mt-0 md:mt-12 md:w-max mx-auto text-center md:text-2xl lg:text-3xl uppercase xs:w-max xs:text-xl xl:text-3xl  text-black p-2\">\r\n          {title}\r\n        </h1>\r\n        <span className=\"line h-0.5 block bg-gray-500 md:w-40 xs:w-28 mx-auto\"></span>\r\n\r\n        <Path className=\"flex justify-start my-6\"/>\r\n\r\n        <div className=\"sort-wrap flex md:flex-wrap md:justify-center lg:justify-normal lg:flex-nowrap xs:flex-wrap xs:justify-center\">\r\n          \r\n            <SortByPrice category={category}/>\r\n            \r\n          <div className=\"product-wrap w-full flex flex-wrap justify-center items-center md:my-0 xs:my-6\">\r\n            {isLoading ? <ClipLoader/> : filteredData.length === 0 ? <div className=\"text-gray-500 mt-4 xs:text-sm md:text-xl\">Нічого не знайдено за поточним фільтром.</div> : (\r\n              dataToDisplay\r\n                .filter(item => slugify(item.category, { lower: true, locale: 'ru' }) === category)\r\n                .slice(0, cards)\r\n                .map((item, index) => (\r\n                  <Link\r\n                    key={index}\r\n                    className=\"catalog-block__link border border-gray-200 shadow-md m-4 cursor-pointer hover:shadow-lg transition-transform transform hover:scale-105 xs:w-full xm:w-2/5 sm:w-1/2 md:w-1/3 lg:w-2/5 xl:w-1/3 2xl:w-1/4\"\r\n                    to={`/${'for-' + category}/${slugify(item.title, { lower: true, locale: 'ru' })}`}\r\n                  >\r\n                    <div className=\"catalog-block relative w-full h-full\">\r\n                      <img\r\n                        src={require(`../img/${item.image}`)}\r\n                        alt={item.name}\r\n                        className=\"catalog-block__img w-full h-full object-cover\"\r\n                      />\r\n                      <div className=\"catalog-block__info max-h-max absolute bottom-0 left-0 right-0 bg-white bg-opacity-90 p-4 text-center\">\r\n                        <div className=\"catalog-block__title xs:text-sm font-semibold xl:text-md lg:text-sm text-gray-800\">\r\n                          {item.title}\r\n                        </div>\r\n                        <div className=\"catalog-block__price font-medium text-indigo-500 mt-2\">\r\n                          {item.price} ₴\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Link>\r\n                ))\r\n            )}\r\n          </div>   \r\n        </div>\r\n        {isLoading ? null : <button\r\n          disabled={disabled}\r\n          onClick={handleClick}\r\n          type=\"button\"\r\n          className={`my-4 py-2.5 px-6 text-sm font-semibold transition-all duration-300 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 ${\r\n            disabled \r\n              ? \"bg-gray-400 text-gray-300 cursor-not-allowed\" // Стили при disabled\r\n              : \"bg-gray-800 text-white hover:bg-gray-600 focus:ring-gray-500\"\r\n          }`}\r\n        >\r\n          {disabled ? 'Немає товарів' : 'Завантажити'}\r\n        </button>}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProductListPage; // Проблема решена, останется лишь проверить"],"names":["_ref","className","pathData","setPathData","useState","pathnames","useLocation","pathname","split","filter","x","console","log","getApi","GetApi","useEffect","getProduct","async","dataWithSlugs","map","item","slug","slugify","title","lower","locale","err","_jsx","children","_jsxs","Link","to","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","value","index","slice","join","currentItem","find","Fragment","category","setValue","productData","filteredData","setFilteredData","cards","setSelect","useProductContext","_Fragment","Slider","min","max","onChange","filterChange","event","newValue","activeThumb","Math","valueLabelDisplay","disableSwap","color","sx","width","height","border","backgroundColor","boxShadow","borderRadius","opacity","type","e","target","placeholder","onClick","sorting","filteredCards","price","Select","options","label","selectedOption","selectedValue","currentCards","filteredLow","sort","a","b","filteredHigh","selectChange","isLoading","setIsLoading","disabled","setDisabled","setProductData","setCards","data","setTimeout","error","dataToDisplay","length","Path","SortByPrice","ClipLoader","src","require","image","alt","name","handleClick","request","filteredItems","prev"],"sourceRoot":""}